{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Sider","Content","App","className","style","padding","float","src","color","level","defaultSelectedKeys","mode","Item","key","title","ItemGroup","margin","background","minHeight","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAKQA,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,OAAQC,EAAmBF,IAAnBE,MAAOC,EAAYH,IAAZG,QA+ChBC,MA5Cf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACN,EAAD,CAAQO,MAAO,CAACC,QAAQ,KACtB,kBAAC,IAAD,CAAQD,MAAO,CAACE,MAAM,SAAUC,IAAI,cACpC,kBAAC,IAAD,CAAOH,MAAO,CAACI,MAAM,SAAUC,MAAO,GAAtC,sBAEF,kBAAC,IAAD,KACE,kBAACT,EAAD,KACE,kBAAC,IAAD,CAAMU,oBAAqB,CAAC,aAAcC,KAAK,UAE7C,kBAAC,IAAKC,KAAN,CAAWC,IAAI,aAAf,aAEA,kBAAC,IAAD,CAASC,MAAO,kCAAO,0CAAP,MACd,kBAAC,IAAKC,UAAN,CAAgBF,IAAI,MAClB,kBAAC,IAAKD,KAAN,CAAWC,IAAI,cAAf,eACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,gBAAf,kBAIJ,kBAAC,IAAKD,KAAN,CAAWC,IAAI,YAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,WAAf,WACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,UAAf,YAGJ,kBAAC,IAAD,KAEE,kBAACZ,EAAD,CAASG,MAAO,CAAEC,QAAS,WAC3B,kBAAC,IAAD,CAAYD,MAAO,CAAEY,OAAQ,WAC7B,kBAAC,IAAWJ,KAAZ,mBAEA,yBAAKR,MAAO,CAACa,WAAW,OAAQZ,QAAQ,GAAIa,UAAU,MAAtD,YAGA,kBAACnB,EAAD,CAAQK,MAAO,CAAEe,UAAW,WAA5B,oBC/BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8a76227.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Avatar, Menu, Breadcrumb } from 'antd';\nimport './App.css';\nimport Title from 'antd/lib/typography/Title';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nconst { Header, Footer, Sider, Content } = Layout;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header style={{padding:10}}>       \n          <Avatar style={{float:'right'}} src='./dpp.png' />\n          <Title style={{color:'white'}} level={4}>ADITYA MAHESHWARI</Title>\n        </Header>   \n        <Layout>\n          <Sider >\n            <Menu defaultSelectedKeys={['Dashboard']} mode=\"inline\">\n\n              <Menu.Item key='Dashboard'>DashBoard</Menu.Item>\n              \n              <SubMenu title={<span> <span>Projects</span> </span> }>\n                <Menu.ItemGroup key='g1'>\n                  <Menu.Item key='My Project'>My Projects</Menu.Item>\n                  <Menu.Item key='Add Projects'>Add Projects</Menu.Item>\n                </Menu.ItemGroup>\n              </SubMenu>\n\n              <Menu.Item key='Receipts'>Receipts</Menu.Item>\n              <Menu.Item key='Profile'>Profile</Menu.Item>\n              <Menu.Item key='Logout'>Logout</Menu.Item>\n            </Menu>\n          </Sider>\n          <Layout>\n\n            <Content style={{ padding: '0 50px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>DashBoard</Breadcrumb.Item>\n            </Breadcrumb>\n            <div style={{background:'#fff', padding:24, minHeight:580}}>Content</div>\n            </Content>\n\n            <Footer style={{ textAlign: 'center' }}>Bug Tracker</Footer>\n            \n            </Layout>\n          </Layout>\n    </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}